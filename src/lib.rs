//! # GNOME Online Accounts
//!
//! The Rust bindings for libgoa generated by GIR.
//!
//! A simpler API is planed.
//!
//! ## Usage
//!
//! ### Install libgoa
//!
//! - Fedora
//!
//!   ```none
//!   # dnf install gnome-online-accounts-devel
//!   ```
//!
//! - Debian and derived
//!
//!   ```none
//!   # apt install libgoa-1.0-dev
//!   ```
//!
//! ### Add the dependency
//!
//! ```toml
//! [dependencies]
//! goa = "0.0.1"
//! ```
//!
//! ## Generate and build from scratch
//!
//! Install [GIR](https://github.com/gtk-rs/gir).
//!
//! ```none
//! git clone --recurse https://gitlab.gnome.org/World/Rust/libgoa-rs
//! cd libgoa-rs/goa-sys && gir # Generates the goa-sys crate
//! cd .. && gir # Generates the goa crate
//! cargo build
//! ```
//!
//! ## License
//!
//! Either MIT or Apache 2.0, left to the user's choice.

#[macro_use]
extern crate glib;
extern crate fragile;
extern crate gio;
extern crate gio_sys;
extern crate glib_sys;
extern crate goa_sys;
extern crate gobject_sys;

#[rustfmt::skip]
mod auto;

pub use auto::*;
use std as futures;

//FIXME: I must implement it by hand. Why?
#[doc(hidden)]
impl glib::translate::FromGlibPtrFull<*mut glib_sys::GError> for Error {
    #[inline]
    unsafe fn from_glib_full(ptr: *mut glib_sys::GError) -> Self {
        match (*ptr).code {
            goa_sys::GOA_ERROR_FAILED => Error::Failed,
            goa_sys::GOA_ERROR_NOT_SUPPORTED => Error::NotSupported,
            goa_sys::GOA_ERROR_DIALOG_DISMISSED => Error::DialogDismissed,
            goa_sys::GOA_ERROR_ACCOUNT_EXISTS => Error::AccountExists,
            goa_sys::GOA_ERROR_NOT_AUTHORIZED => Error::NotAuthorized,
            goa_sys::GOA_ERROR_SSL => Error::Ssl,
            value => Error::__Unknown(value),
        }
    }
}
