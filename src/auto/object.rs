// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Account;
use Calendar;
use Chat;
use Contacts;
use Documents;
#[cfg(any(feature = "v3_6", feature = "dox"))]
use Exchange;
#[cfg(any(feature = "v3_8", feature = "dox"))]
use Files;
use Mail;
use Manager;
#[cfg(any(feature = "v3_14", feature = "dox"))]
use Maps;
#[cfg(any(feature = "v3_14", feature = "dox"))]
use MediaServer;
#[cfg(any(feature = "v3_18", feature = "dox"))]
use Music;
use OAuth2Based;
use OAuthBased;
#[cfg(any(feature = "v3_6", feature = "dox"))]
use PasswordBased;
#[cfg(any(feature = "v3_8", feature = "dox"))]
use Photos;
#[cfg(any(feature = "v3_12", feature = "dox"))]
use Printers;
#[cfg(any(feature = "v3_12", feature = "dox"))]
use ReadLater;
#[cfg(any(feature = "v3_6", feature = "dox"))]
use Ticketing;
#[cfg(any(feature = "v3_26", feature = "dox"))]
use Todo;
use glib::Value;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use goa_sys;
use gobject_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct Object(Interface<goa_sys::GoaObject>);

    match fn {
        get_type => || goa_sys::goa_object_get_type(),
    }
}

pub const NONE_OBJECT: Option<&Object> = None;

pub trait ObjectExt: 'static {
    fn get_account(&self) -> Option<Account>;

    fn get_calendar(&self) -> Option<Calendar>;

    fn get_chat(&self) -> Option<Chat>;

    fn get_contacts(&self) -> Option<Contacts>;

    fn get_documents(&self) -> Option<Documents>;

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn get_exchange(&self) -> Option<Exchange>;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_files(&self) -> Option<Files>;

    fn get_mail(&self) -> Option<Mail>;

    fn get_manager(&self) -> Option<Manager>;

    #[cfg(any(feature = "v3_14", feature = "dox"))]
    fn get_maps(&self) -> Option<Maps>;

    #[cfg(any(feature = "v3_14", feature = "dox"))]
    fn get_media_server(&self) -> Option<MediaServer>;

    #[cfg(any(feature = "v3_18", feature = "dox"))]
    fn get_music(&self) -> Option<Music>;

    fn get_oauth2_based(&self) -> Option<OAuth2Based>;

    fn get_oauth_based(&self) -> Option<OAuthBased>;

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn get_password_based(&self) -> Option<PasswordBased>;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_photos(&self) -> Option<Photos>;

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn get_printers(&self) -> Option<Printers>;

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn get_read_later(&self) -> Option<ReadLater>;

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn get_ticketing(&self) -> Option<Ticketing>;

    #[cfg(any(feature = "v3_26", feature = "dox"))]
    fn get_todo(&self) -> Option<Todo>;

    fn peek_account(&self) -> Option<Account>;

    fn peek_calendar(&self) -> Option<Calendar>;

    fn peek_chat(&self) -> Option<Chat>;

    fn peek_contacts(&self) -> Option<Contacts>;

    fn peek_documents(&self) -> Option<Documents>;

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn peek_exchange(&self) -> Option<Exchange>;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn peek_files(&self) -> Option<Files>;

    fn peek_mail(&self) -> Option<Mail>;

    fn peek_manager(&self) -> Option<Manager>;

    #[cfg(any(feature = "v3_14", feature = "dox"))]
    fn peek_maps(&self) -> Option<Maps>;

    #[cfg(any(feature = "v3_14", feature = "dox"))]
    fn peek_media_server(&self) -> Option<MediaServer>;

    #[cfg(any(feature = "v3_18", feature = "dox"))]
    fn peek_music(&self) -> Option<Music>;

    fn peek_oauth2_based(&self) -> Option<OAuth2Based>;

    fn peek_oauth_based(&self) -> Option<OAuthBased>;

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn peek_password_based(&self) -> Option<PasswordBased>;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn peek_photos(&self) -> Option<Photos>;

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn peek_printers(&self) -> Option<Printers>;

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn peek_read_later(&self) -> Option<ReadLater>;

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn peek_ticketing(&self) -> Option<Ticketing>;

    #[cfg(any(feature = "v3_26", feature = "dox"))]
    fn peek_todo(&self) -> Option<Todo>;

    fn set_property_account(&self, account: Option<&Account>);

    fn set_property_calendar(&self, calendar: Option<&Calendar>);

    fn set_property_chat(&self, chat: Option<&Chat>);

    fn set_property_contacts(&self, contacts: Option<&Contacts>);

    fn set_property_documents(&self, documents: Option<&Documents>);

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn set_property_exchange(&self, exchange: Option<&Exchange>);

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_property_files(&self, files: Option<&Files>);

    fn set_property_mail(&self, mail: Option<&Mail>);

    fn set_property_manager(&self, manager: Option<&Manager>);

    #[cfg(any(feature = "v3_14", feature = "dox"))]
    fn set_property_maps(&self, maps: Option<&Maps>);

    #[cfg(any(feature = "v3_14", feature = "dox"))]
    fn set_property_media_server(&self, media_server: Option<&MediaServer>);

    #[cfg(any(feature = "v3_18", feature = "dox"))]
    fn set_property_music(&self, music: Option<&Music>);

    fn set_property_oauth_based(&self, oauth_based: Option<&OAuthBased>);

    fn set_property_oauth2_based(&self, oauth2_based: Option<&OAuth2Based>);

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn set_property_password_based(&self, password_based: Option<&PasswordBased>);

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_property_photos(&self, photos: Option<&Photos>);

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn set_property_printers(&self, printers: Option<&Printers>);

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn set_property_read_later(&self, read_later: Option<&ReadLater>);

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn set_property_ticketing(&self, ticketing: Option<&Ticketing>);

    #[cfg(any(feature = "v3_26", feature = "dox"))]
    fn set_property_todo(&self, todo: Option<&Todo>);

    fn connect_property_account_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_calendar_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_chat_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_contacts_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_documents_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn connect_property_exchange_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_files_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_mail_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_manager_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_14", feature = "dox"))]
    fn connect_property_maps_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_14", feature = "dox"))]
    fn connect_property_media_server_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_18", feature = "dox"))]
    fn connect_property_music_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_oauth_based_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_oauth2_based_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn connect_property_password_based_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_photos_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn connect_property_printers_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn connect_property_read_later_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn connect_property_ticketing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_26", feature = "dox"))]
    fn connect_property_todo_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Object>> ObjectExt for O {
    fn get_account(&self) -> Option<Account> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_account(self.as_ref().to_glib_none().0))
        }
    }

    fn get_calendar(&self) -> Option<Calendar> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_calendar(self.as_ref().to_glib_none().0))
        }
    }

    fn get_chat(&self) -> Option<Chat> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_chat(self.as_ref().to_glib_none().0))
        }
    }

    fn get_contacts(&self) -> Option<Contacts> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_contacts(self.as_ref().to_glib_none().0))
        }
    }

    fn get_documents(&self) -> Option<Documents> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_documents(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn get_exchange(&self) -> Option<Exchange> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_exchange(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_files(&self) -> Option<Files> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_files(self.as_ref().to_glib_none().0))
        }
    }

    fn get_mail(&self) -> Option<Mail> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_mail(self.as_ref().to_glib_none().0))
        }
    }

    fn get_manager(&self) -> Option<Manager> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_manager(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_14", feature = "dox"))]
    fn get_maps(&self) -> Option<Maps> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_maps(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_14", feature = "dox"))]
    fn get_media_server(&self) -> Option<MediaServer> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_media_server(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_18", feature = "dox"))]
    fn get_music(&self) -> Option<Music> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_music(self.as_ref().to_glib_none().0))
        }
    }

    fn get_oauth2_based(&self) -> Option<OAuth2Based> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_oauth2_based(self.as_ref().to_glib_none().0))
        }
    }

    fn get_oauth_based(&self) -> Option<OAuthBased> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_oauth_based(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn get_password_based(&self) -> Option<PasswordBased> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_password_based(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_photos(&self) -> Option<Photos> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_photos(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn get_printers(&self) -> Option<Printers> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_printers(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn get_read_later(&self) -> Option<ReadLater> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_read_later(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn get_ticketing(&self) -> Option<Ticketing> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_ticketing(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_26", feature = "dox"))]
    fn get_todo(&self) -> Option<Todo> {
        unsafe {
            from_glib_full(goa_sys::goa_object_get_todo(self.as_ref().to_glib_none().0))
        }
    }

    fn peek_account(&self) -> Option<Account> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_account(self.as_ref().to_glib_none().0))
        }
    }

    fn peek_calendar(&self) -> Option<Calendar> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_calendar(self.as_ref().to_glib_none().0))
        }
    }

    fn peek_chat(&self) -> Option<Chat> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_chat(self.as_ref().to_glib_none().0))
        }
    }

    fn peek_contacts(&self) -> Option<Contacts> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_contacts(self.as_ref().to_glib_none().0))
        }
    }

    fn peek_documents(&self) -> Option<Documents> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_documents(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn peek_exchange(&self) -> Option<Exchange> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_exchange(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn peek_files(&self) -> Option<Files> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_files(self.as_ref().to_glib_none().0))
        }
    }

    fn peek_mail(&self) -> Option<Mail> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_mail(self.as_ref().to_glib_none().0))
        }
    }

    fn peek_manager(&self) -> Option<Manager> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_manager(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_14", feature = "dox"))]
    fn peek_maps(&self) -> Option<Maps> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_maps(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_14", feature = "dox"))]
    fn peek_media_server(&self) -> Option<MediaServer> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_media_server(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_18", feature = "dox"))]
    fn peek_music(&self) -> Option<Music> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_music(self.as_ref().to_glib_none().0))
        }
    }

    fn peek_oauth2_based(&self) -> Option<OAuth2Based> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_oauth2_based(self.as_ref().to_glib_none().0))
        }
    }

    fn peek_oauth_based(&self) -> Option<OAuthBased> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_oauth_based(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn peek_password_based(&self) -> Option<PasswordBased> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_password_based(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn peek_photos(&self) -> Option<Photos> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_photos(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn peek_printers(&self) -> Option<Printers> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_printers(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn peek_read_later(&self) -> Option<ReadLater> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_read_later(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn peek_ticketing(&self) -> Option<Ticketing> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_ticketing(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_26", feature = "dox"))]
    fn peek_todo(&self) -> Option<Todo> {
        unsafe {
            from_glib_none(goa_sys::goa_object_peek_todo(self.as_ref().to_glib_none().0))
        }
    }

    fn set_property_account(&self, account: Option<&Account>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"account\0".as_ptr() as *const _, Value::from(account).to_glib_none().0);
        }
    }

    fn set_property_calendar(&self, calendar: Option<&Calendar>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"calendar\0".as_ptr() as *const _, Value::from(calendar).to_glib_none().0);
        }
    }

    fn set_property_chat(&self, chat: Option<&Chat>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"chat\0".as_ptr() as *const _, Value::from(chat).to_glib_none().0);
        }
    }

    fn set_property_contacts(&self, contacts: Option<&Contacts>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"contacts\0".as_ptr() as *const _, Value::from(contacts).to_glib_none().0);
        }
    }

    fn set_property_documents(&self, documents: Option<&Documents>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"documents\0".as_ptr() as *const _, Value::from(documents).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn set_property_exchange(&self, exchange: Option<&Exchange>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"exchange\0".as_ptr() as *const _, Value::from(exchange).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_property_files(&self, files: Option<&Files>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"files\0".as_ptr() as *const _, Value::from(files).to_glib_none().0);
        }
    }

    fn set_property_mail(&self, mail: Option<&Mail>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"mail\0".as_ptr() as *const _, Value::from(mail).to_glib_none().0);
        }
    }

    fn set_property_manager(&self, manager: Option<&Manager>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"manager\0".as_ptr() as *const _, Value::from(manager).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_14", feature = "dox"))]
    fn set_property_maps(&self, maps: Option<&Maps>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"maps\0".as_ptr() as *const _, Value::from(maps).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_14", feature = "dox"))]
    fn set_property_media_server(&self, media_server: Option<&MediaServer>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"media-server\0".as_ptr() as *const _, Value::from(media_server).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_18", feature = "dox"))]
    fn set_property_music(&self, music: Option<&Music>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"music\0".as_ptr() as *const _, Value::from(music).to_glib_none().0);
        }
    }

    fn set_property_oauth_based(&self, oauth_based: Option<&OAuthBased>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"oauth-based\0".as_ptr() as *const _, Value::from(oauth_based).to_glib_none().0);
        }
    }

    fn set_property_oauth2_based(&self, oauth2_based: Option<&OAuth2Based>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"oauth2-based\0".as_ptr() as *const _, Value::from(oauth2_based).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn set_property_password_based(&self, password_based: Option<&PasswordBased>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"password-based\0".as_ptr() as *const _, Value::from(password_based).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_property_photos(&self, photos: Option<&Photos>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"photos\0".as_ptr() as *const _, Value::from(photos).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn set_property_printers(&self, printers: Option<&Printers>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"printers\0".as_ptr() as *const _, Value::from(printers).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn set_property_read_later(&self, read_later: Option<&ReadLater>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"read-later\0".as_ptr() as *const _, Value::from(read_later).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn set_property_ticketing(&self, ticketing: Option<&Ticketing>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"ticketing\0".as_ptr() as *const _, Value::from(ticketing).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_26", feature = "dox"))]
    fn set_property_todo(&self, todo: Option<&Todo>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"todo\0".as_ptr() as *const _, Value::from(todo).to_glib_none().0);
        }
    }

    fn connect_property_account_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_account_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::account\0".as_ptr() as *const _,
                Some(transmute(notify_account_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_calendar_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_calendar_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::calendar\0".as_ptr() as *const _,
                Some(transmute(notify_calendar_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_chat_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_chat_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::chat\0".as_ptr() as *const _,
                Some(transmute(notify_chat_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_contacts_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_contacts_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::contacts\0".as_ptr() as *const _,
                Some(transmute(notify_contacts_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_documents_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_documents_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::documents\0".as_ptr() as *const _,
                Some(transmute(notify_documents_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn connect_property_exchange_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_exchange_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::exchange\0".as_ptr() as *const _,
                Some(transmute(notify_exchange_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_files_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_files_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::files\0".as_ptr() as *const _,
                Some(transmute(notify_files_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_mail_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mail_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::mail\0".as_ptr() as *const _,
                Some(transmute(notify_mail_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_manager_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_manager_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::manager\0".as_ptr() as *const _,
                Some(transmute(notify_manager_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_14", feature = "dox"))]
    fn connect_property_maps_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_maps_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::maps\0".as_ptr() as *const _,
                Some(transmute(notify_maps_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_14", feature = "dox"))]
    fn connect_property_media_server_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_media_server_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::media-server\0".as_ptr() as *const _,
                Some(transmute(notify_media_server_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_18", feature = "dox"))]
    fn connect_property_music_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_music_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::music\0".as_ptr() as *const _,
                Some(transmute(notify_music_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_oauth_based_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_oauth_based_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::oauth-based\0".as_ptr() as *const _,
                Some(transmute(notify_oauth_based_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_oauth2_based_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_oauth2_based_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::oauth2-based\0".as_ptr() as *const _,
                Some(transmute(notify_oauth2_based_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn connect_property_password_based_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_password_based_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::password-based\0".as_ptr() as *const _,
                Some(transmute(notify_password_based_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_photos_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_photos_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::photos\0".as_ptr() as *const _,
                Some(transmute(notify_photos_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn connect_property_printers_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_printers_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::printers\0".as_ptr() as *const _,
                Some(transmute(notify_printers_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn connect_property_read_later_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_read_later_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::read-later\0".as_ptr() as *const _,
                Some(transmute(notify_read_later_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn connect_property_ticketing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ticketing_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::ticketing\0".as_ptr() as *const _,
                Some(transmute(notify_ticketing_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_26", feature = "dox"))]
    fn connect_property_todo_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_todo_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaObject, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::todo\0".as_ptr() as *const _,
                Some(transmute(notify_todo_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Object {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Object")
    }
}
