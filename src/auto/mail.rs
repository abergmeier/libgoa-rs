// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::GString;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use goa_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct Mail(Interface<goa_sys::GoaMail>);

    match fn {
        get_type => || goa_sys::goa_mail_get_type(),
    }
}

impl Mail {
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call goa_sys:goa_mail_interface_info() }
    //}

    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call goa_sys:goa_mail_override_properties() }
    //}
}

pub const NONE_MAIL: Option<&Mail> = None;

pub trait MailExt: 'static {
    fn dup_email_address(&self) -> Option<GString>;

    fn dup_imap_host(&self) -> Option<GString>;

    fn dup_imap_user_name(&self) -> Option<GString>;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn dup_name(&self) -> Option<GString>;

    fn dup_smtp_host(&self) -> Option<GString>;

    fn dup_smtp_user_name(&self) -> Option<GString>;

    fn get_email_address(&self) -> Option<GString>;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_imap_accept_ssl_errors(&self) -> bool;

    fn get_imap_host(&self) -> Option<GString>;

    fn get_imap_supported(&self) -> bool;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_imap_use_ssl(&self) -> bool;

    fn get_imap_use_tls(&self) -> bool;

    fn get_imap_user_name(&self) -> Option<GString>;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_name(&self) -> Option<GString>;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_smtp_accept_ssl_errors(&self) -> bool;

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn get_smtp_auth_login(&self) -> bool;

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn get_smtp_auth_plain(&self) -> bool;

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn get_smtp_auth_xoauth2(&self) -> bool;

    fn get_smtp_host(&self) -> Option<GString>;

    fn get_smtp_supported(&self) -> bool;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_smtp_use_auth(&self) -> bool;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_smtp_use_ssl(&self) -> bool;

    fn get_smtp_use_tls(&self) -> bool;

    fn get_smtp_user_name(&self) -> Option<GString>;

    fn set_email_address(&self, value: &str);

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_imap_accept_ssl_errors(&self, value: bool);

    fn set_imap_host(&self, value: &str);

    fn set_imap_supported(&self, value: bool);

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_imap_use_ssl(&self, value: bool);

    fn set_imap_use_tls(&self, value: bool);

    fn set_imap_user_name(&self, value: &str);

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_name(&self, value: &str);

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_smtp_accept_ssl_errors(&self, value: bool);

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn set_smtp_auth_login(&self, value: bool);

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn set_smtp_auth_plain(&self, value: bool);

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn set_smtp_auth_xoauth2(&self, value: bool);

    fn set_smtp_host(&self, value: &str);

    fn set_smtp_supported(&self, value: bool);

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_smtp_use_auth(&self, value: bool);

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_smtp_use_ssl(&self, value: bool);

    fn set_smtp_use_tls(&self, value: bool);

    fn set_smtp_user_name(&self, value: &str);

    fn connect_property_email_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_imap_accept_ssl_errors_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_imap_host_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_imap_supported_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_imap_use_ssl_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_imap_use_tls_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_imap_user_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_smtp_accept_ssl_errors_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn connect_property_smtp_auth_login_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn connect_property_smtp_auth_plain_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn connect_property_smtp_auth_xoauth2_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_smtp_host_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_smtp_supported_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_smtp_use_auth_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_smtp_use_ssl_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_smtp_use_tls_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_smtp_user_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Mail>> MailExt for O {
    fn dup_email_address(&self) -> Option<GString> {
        unsafe {
            from_glib_full(goa_sys::goa_mail_dup_email_address(self.as_ref().to_glib_none().0))
        }
    }

    fn dup_imap_host(&self) -> Option<GString> {
        unsafe {
            from_glib_full(goa_sys::goa_mail_dup_imap_host(self.as_ref().to_glib_none().0))
        }
    }

    fn dup_imap_user_name(&self) -> Option<GString> {
        unsafe {
            from_glib_full(goa_sys::goa_mail_dup_imap_user_name(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn dup_name(&self) -> Option<GString> {
        unsafe {
            from_glib_full(goa_sys::goa_mail_dup_name(self.as_ref().to_glib_none().0))
        }
    }

    fn dup_smtp_host(&self) -> Option<GString> {
        unsafe {
            from_glib_full(goa_sys::goa_mail_dup_smtp_host(self.as_ref().to_glib_none().0))
        }
    }

    fn dup_smtp_user_name(&self) -> Option<GString> {
        unsafe {
            from_glib_full(goa_sys::goa_mail_dup_smtp_user_name(self.as_ref().to_glib_none().0))
        }
    }

    fn get_email_address(&self) -> Option<GString> {
        unsafe {
            from_glib_none(goa_sys::goa_mail_get_email_address(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_imap_accept_ssl_errors(&self) -> bool {
        unsafe {
            from_glib(goa_sys::goa_mail_get_imap_accept_ssl_errors(self.as_ref().to_glib_none().0))
        }
    }

    fn get_imap_host(&self) -> Option<GString> {
        unsafe {
            from_glib_none(goa_sys::goa_mail_get_imap_host(self.as_ref().to_glib_none().0))
        }
    }

    fn get_imap_supported(&self) -> bool {
        unsafe {
            from_glib(goa_sys::goa_mail_get_imap_supported(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_imap_use_ssl(&self) -> bool {
        unsafe {
            from_glib(goa_sys::goa_mail_get_imap_use_ssl(self.as_ref().to_glib_none().0))
        }
    }

    fn get_imap_use_tls(&self) -> bool {
        unsafe {
            from_glib(goa_sys::goa_mail_get_imap_use_tls(self.as_ref().to_glib_none().0))
        }
    }

    fn get_imap_user_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(goa_sys::goa_mail_get_imap_user_name(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(goa_sys::goa_mail_get_name(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_smtp_accept_ssl_errors(&self) -> bool {
        unsafe {
            from_glib(goa_sys::goa_mail_get_smtp_accept_ssl_errors(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn get_smtp_auth_login(&self) -> bool {
        unsafe {
            from_glib(goa_sys::goa_mail_get_smtp_auth_login(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn get_smtp_auth_plain(&self) -> bool {
        unsafe {
            from_glib(goa_sys::goa_mail_get_smtp_auth_plain(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn get_smtp_auth_xoauth2(&self) -> bool {
        unsafe {
            from_glib(goa_sys::goa_mail_get_smtp_auth_xoauth2(self.as_ref().to_glib_none().0))
        }
    }

    fn get_smtp_host(&self) -> Option<GString> {
        unsafe {
            from_glib_none(goa_sys::goa_mail_get_smtp_host(self.as_ref().to_glib_none().0))
        }
    }

    fn get_smtp_supported(&self) -> bool {
        unsafe {
            from_glib(goa_sys::goa_mail_get_smtp_supported(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_smtp_use_auth(&self) -> bool {
        unsafe {
            from_glib(goa_sys::goa_mail_get_smtp_use_auth(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_smtp_use_ssl(&self) -> bool {
        unsafe {
            from_glib(goa_sys::goa_mail_get_smtp_use_ssl(self.as_ref().to_glib_none().0))
        }
    }

    fn get_smtp_use_tls(&self) -> bool {
        unsafe {
            from_glib(goa_sys::goa_mail_get_smtp_use_tls(self.as_ref().to_glib_none().0))
        }
    }

    fn get_smtp_user_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(goa_sys::goa_mail_get_smtp_user_name(self.as_ref().to_glib_none().0))
        }
    }

    fn set_email_address(&self, value: &str) {
        unsafe {
            goa_sys::goa_mail_set_email_address(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_imap_accept_ssl_errors(&self, value: bool) {
        unsafe {
            goa_sys::goa_mail_set_imap_accept_ssl_errors(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    fn set_imap_host(&self, value: &str) {
        unsafe {
            goa_sys::goa_mail_set_imap_host(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_imap_supported(&self, value: bool) {
        unsafe {
            goa_sys::goa_mail_set_imap_supported(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_imap_use_ssl(&self, value: bool) {
        unsafe {
            goa_sys::goa_mail_set_imap_use_ssl(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    fn set_imap_use_tls(&self, value: bool) {
        unsafe {
            goa_sys::goa_mail_set_imap_use_tls(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    fn set_imap_user_name(&self, value: &str) {
        unsafe {
            goa_sys::goa_mail_set_imap_user_name(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_name(&self, value: &str) {
        unsafe {
            goa_sys::goa_mail_set_name(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_smtp_accept_ssl_errors(&self, value: bool) {
        unsafe {
            goa_sys::goa_mail_set_smtp_accept_ssl_errors(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn set_smtp_auth_login(&self, value: bool) {
        unsafe {
            goa_sys::goa_mail_set_smtp_auth_login(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn set_smtp_auth_plain(&self, value: bool) {
        unsafe {
            goa_sys::goa_mail_set_smtp_auth_plain(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn set_smtp_auth_xoauth2(&self, value: bool) {
        unsafe {
            goa_sys::goa_mail_set_smtp_auth_xoauth2(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    fn set_smtp_host(&self, value: &str) {
        unsafe {
            goa_sys::goa_mail_set_smtp_host(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_smtp_supported(&self, value: bool) {
        unsafe {
            goa_sys::goa_mail_set_smtp_supported(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_smtp_use_auth(&self, value: bool) {
        unsafe {
            goa_sys::goa_mail_set_smtp_use_auth(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_smtp_use_ssl(&self, value: bool) {
        unsafe {
            goa_sys::goa_mail_set_smtp_use_ssl(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    fn set_smtp_use_tls(&self, value: bool) {
        unsafe {
            goa_sys::goa_mail_set_smtp_use_tls(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    fn set_smtp_user_name(&self, value: &str) {
        unsafe {
            goa_sys::goa_mail_set_smtp_user_name(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn connect_property_email_address_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_email_address_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaMail, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Mail>
        {
            let f: &F = &*(f as *const F);
            f(&Mail::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::email-address\0".as_ptr() as *const _,
                Some(transmute(notify_email_address_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_imap_accept_ssl_errors_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_imap_accept_ssl_errors_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaMail, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Mail>
        {
            let f: &F = &*(f as *const F);
            f(&Mail::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::imap-accept-ssl-errors\0".as_ptr() as *const _,
                Some(transmute(notify_imap_accept_ssl_errors_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_imap_host_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_imap_host_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaMail, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Mail>
        {
            let f: &F = &*(f as *const F);
            f(&Mail::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::imap-host\0".as_ptr() as *const _,
                Some(transmute(notify_imap_host_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_imap_supported_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_imap_supported_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaMail, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Mail>
        {
            let f: &F = &*(f as *const F);
            f(&Mail::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::imap-supported\0".as_ptr() as *const _,
                Some(transmute(notify_imap_supported_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_imap_use_ssl_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_imap_use_ssl_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaMail, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Mail>
        {
            let f: &F = &*(f as *const F);
            f(&Mail::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::imap-use-ssl\0".as_ptr() as *const _,
                Some(transmute(notify_imap_use_ssl_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_imap_use_tls_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_imap_use_tls_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaMail, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Mail>
        {
            let f: &F = &*(f as *const F);
            f(&Mail::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::imap-use-tls\0".as_ptr() as *const _,
                Some(transmute(notify_imap_use_tls_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_imap_user_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_imap_user_name_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaMail, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Mail>
        {
            let f: &F = &*(f as *const F);
            f(&Mail::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::imap-user-name\0".as_ptr() as *const _,
                Some(transmute(notify_imap_user_name_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaMail, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Mail>
        {
            let f: &F = &*(f as *const F);
            f(&Mail::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(transmute(notify_name_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_smtp_accept_ssl_errors_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_smtp_accept_ssl_errors_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaMail, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Mail>
        {
            let f: &F = &*(f as *const F);
            f(&Mail::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::smtp-accept-ssl-errors\0".as_ptr() as *const _,
                Some(transmute(notify_smtp_accept_ssl_errors_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn connect_property_smtp_auth_login_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_smtp_auth_login_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaMail, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Mail>
        {
            let f: &F = &*(f as *const F);
            f(&Mail::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::smtp-auth-login\0".as_ptr() as *const _,
                Some(transmute(notify_smtp_auth_login_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn connect_property_smtp_auth_plain_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_smtp_auth_plain_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaMail, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Mail>
        {
            let f: &F = &*(f as *const F);
            f(&Mail::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::smtp-auth-plain\0".as_ptr() as *const _,
                Some(transmute(notify_smtp_auth_plain_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn connect_property_smtp_auth_xoauth2_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_smtp_auth_xoauth2_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaMail, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Mail>
        {
            let f: &F = &*(f as *const F);
            f(&Mail::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::smtp-auth-xoauth2\0".as_ptr() as *const _,
                Some(transmute(notify_smtp_auth_xoauth2_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_smtp_host_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_smtp_host_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaMail, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Mail>
        {
            let f: &F = &*(f as *const F);
            f(&Mail::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::smtp-host\0".as_ptr() as *const _,
                Some(transmute(notify_smtp_host_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_smtp_supported_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_smtp_supported_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaMail, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Mail>
        {
            let f: &F = &*(f as *const F);
            f(&Mail::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::smtp-supported\0".as_ptr() as *const _,
                Some(transmute(notify_smtp_supported_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_smtp_use_auth_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_smtp_use_auth_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaMail, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Mail>
        {
            let f: &F = &*(f as *const F);
            f(&Mail::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::smtp-use-auth\0".as_ptr() as *const _,
                Some(transmute(notify_smtp_use_auth_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_smtp_use_ssl_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_smtp_use_ssl_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaMail, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Mail>
        {
            let f: &F = &*(f as *const F);
            f(&Mail::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::smtp-use-ssl\0".as_ptr() as *const _,
                Some(transmute(notify_smtp_use_ssl_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_smtp_use_tls_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_smtp_use_tls_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaMail, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Mail>
        {
            let f: &F = &*(f as *const F);
            f(&Mail::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::smtp-use-tls\0".as_ptr() as *const _,
                Some(transmute(notify_smtp_use_tls_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_smtp_user_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_smtp_user_name_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaMail, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Mail>
        {
            let f: &F = &*(f as *const F);
            f(&Mail::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::smtp-user-name\0".as_ptr() as *const _,
                Some(transmute(notify_smtp_user_name_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Mail {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Mail")
    }
}
