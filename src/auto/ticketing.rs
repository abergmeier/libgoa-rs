// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v3_6", feature = "dox"))]
use Error;
#[cfg(feature = "futures")]
#[cfg(any(feature = "v3_6", feature = "dox"))]
use futures::future;
#[cfg(any(feature = "v3_6", feature = "dox"))]
use gio;
#[cfg(any(feature = "v3_6", feature = "dox"))]
use gio_sys;
#[cfg(any(feature = "v3_18", feature = "dox"))]
use glib::object::Cast;
use glib::object::IsA;
#[cfg(any(feature = "v3_18", feature = "dox"))]
use glib::signal::SignalHandlerId;
#[cfg(any(feature = "v3_18", feature = "dox"))]
use glib::signal::connect_raw;
use glib::translate::*;
#[cfg(any(feature = "v3_6", feature = "dox"))]
use glib_sys;
use goa_sys;
#[cfg(any(feature = "v3_6", feature = "dox"))]
use gobject_sys;
#[cfg(any(feature = "v3_6", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v3_18", feature = "dox"))]
use std::mem::transmute;
#[cfg(any(feature = "v3_6", feature = "dox"))]
use std::ptr;

glib_wrapper! {
    pub struct Ticketing(Interface<goa_sys::GoaTicketing>);

    match fn {
        get_type => || goa_sys::goa_ticketing_get_type(),
    }
}

impl Ticketing {
    //#[cfg(any(feature = "v3_6", feature = "dox"))]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call goa_sys:goa_ticketing_interface_info() }
    //}

    //#[cfg(any(feature = "v3_6", feature = "dox"))]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call goa_sys:goa_ticketing_override_properties() }
    //}
}

pub const NONE_TICKETING: Option<&Ticketing> = None;

pub trait TicketingExt: 'static {
    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn call_get_ticket<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), Error>) + Send + 'static>(&self, cancellable: Option<&P>, callback: Q);

    #[cfg(feature = "futures")]
    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn call_get_ticket_future(&self) -> Box_<dyn future::Future<Output = Result<(), Error>> + std::marker::Unpin>;

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn call_get_ticket_sync<P: IsA<gio::Cancellable>>(&self, cancellable: Option<&P>) -> Result<(), Error>;

    //#[cfg(any(feature = "v3_6", feature = "dox"))]
    //fn complete_get_ticket(&self, invocation: /*Ignored*/&gio::DBusMethodInvocation);

    //#[cfg(any(feature = "v3_18", feature = "dox"))]
    //fn dup_details(&self) -> /*Ignored*/Option<glib::Variant>;

    //#[cfg(any(feature = "v3_18", feature = "dox"))]
    //fn get_details(&self) -> /*Ignored*/Option<glib::Variant>;

    //#[cfg(any(feature = "v3_18", feature = "dox"))]
    //fn set_details(&self, value: /*Ignored*/&glib::Variant);

    //#[cfg(any(feature = "v3_6", feature = "dox"))]
    //fn connect_handle_get_ticket<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_18", feature = "dox"))]
    fn connect_property_details_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Ticketing>> TicketingExt for O {
    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn call_get_ticket<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), Error>) + Send + 'static>(&self, cancellable: Option<&P>, callback: Q) {
        let user_data: Box<Q> = Box::new(callback);
        unsafe extern "C" fn call_get_ticket_trampoline<Q: FnOnce(Result<(), Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let _ = goa_sys::goa_ticketing_call_get_ticket_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) };
            let callback: Box<Q> = Box::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = call_get_ticket_trampoline::<Q>;
        unsafe {
            goa_sys::goa_ticketing_call_get_ticket(self.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box::into_raw(user_data) as *mut _);
        }
    }

    #[cfg(feature = "futures")]
    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn call_get_ticket_future(&self) -> Box_<dyn future::Future<Output = Result<(), Error>> + std::marker::Unpin> {
        use gio::GioFuture;
        use fragile::Fragile;

        GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            let send = Fragile::new(send);
            obj.call_get_ticket(
                Some(&cancellable),
                move |res| {
                    let _ = send.into_inner().send(res);
                },
            );

            cancellable
        })
    }

    #[cfg(any(feature = "v3_6", feature = "dox"))]
    fn call_get_ticket_sync<P: IsA<gio::Cancellable>>(&self, cancellable: Option<&P>) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = goa_sys::goa_ticketing_call_get_ticket_sync(self.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(any(feature = "v3_6", feature = "dox"))]
    //fn complete_get_ticket(&self, invocation: /*Ignored*/&gio::DBusMethodInvocation) {
    //    unsafe { TODO: call goa_sys:goa_ticketing_complete_get_ticket() }
    //}

    //#[cfg(any(feature = "v3_18", feature = "dox"))]
    //fn dup_details(&self) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call goa_sys:goa_ticketing_dup_details() }
    //}

    //#[cfg(any(feature = "v3_18", feature = "dox"))]
    //fn get_details(&self) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call goa_sys:goa_ticketing_get_details() }
    //}

    //#[cfg(any(feature = "v3_18", feature = "dox"))]
    //fn set_details(&self, value: /*Ignored*/&glib::Variant) {
    //    unsafe { TODO: call goa_sys:goa_ticketing_set_details() }
    //}

    //#[cfg(any(feature = "v3_6", feature = "dox"))]
    //fn connect_handle_get_ticket<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //}

    #[cfg(any(feature = "v3_18", feature = "dox"))]
    fn connect_property_details_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_details_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaTicketing, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Ticketing>
        {
            let f: &F = &*(f as *const F);
            f(&Ticketing::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::details\0".as_ptr() as *const _,
                Some(transmute(notify_details_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Ticketing {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Ticketing")
    }
}
