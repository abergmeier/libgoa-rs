// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v3_8", feature = "dox"))]
use glib::GString;
#[cfg(any(feature = "v3_8", feature = "dox"))]
use glib::object::Cast;
use glib::object::IsA;
#[cfg(any(feature = "v3_8", feature = "dox"))]
use glib::signal::SignalHandlerId;
#[cfg(any(feature = "v3_8", feature = "dox"))]
use glib::signal::connect_raw;
use glib::translate::*;
#[cfg(any(feature = "v3_8", feature = "dox"))]
use glib_sys;
use goa_sys;
#[cfg(any(feature = "v3_8", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v3_8", feature = "dox"))]
use std::mem::transmute;

glib_wrapper! {
    pub struct Files(Interface<goa_sys::GoaFiles>);

    match fn {
        get_type => || goa_sys::goa_files_get_type(),
    }
}

impl Files {
    //#[cfg(any(feature = "v3_8", feature = "dox"))]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call goa_sys:goa_files_interface_info() }
    //}

    //#[cfg(any(feature = "v3_8", feature = "dox"))]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call goa_sys:goa_files_override_properties() }
    //}
}

pub const NONE_FILES: Option<&Files> = None;

pub trait FilesExt: 'static {
    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn dup_uri(&self) -> Option<GString>;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_accept_ssl_errors(&self) -> bool;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_uri(&self) -> Option<GString>;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_accept_ssl_errors(&self, value: bool);

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_uri(&self, value: &str);

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_accept_ssl_errors_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Files>> FilesExt for O {
    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn dup_uri(&self) -> Option<GString> {
        unsafe {
            from_glib_full(goa_sys::goa_files_dup_uri(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_accept_ssl_errors(&self) -> bool {
        unsafe {
            from_glib(goa_sys::goa_files_get_accept_ssl_errors(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn get_uri(&self) -> Option<GString> {
        unsafe {
            from_glib_none(goa_sys::goa_files_get_uri(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_accept_ssl_errors(&self, value: bool) {
        unsafe {
            goa_sys::goa_files_set_accept_ssl_errors(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn set_uri(&self, value: &str) {
        unsafe {
            goa_sys::goa_files_set_uri(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_accept_ssl_errors_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_accept_ssl_errors_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaFiles, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Files>
        {
            let f: &F = &*(f as *const F);
            f(&Files::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::accept-ssl-errors\0".as_ptr() as *const _,
                Some(transmute(notify_accept_ssl_errors_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    fn connect_property_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_uri_trampoline<P, F: Fn(&P) + 'static>(this: *mut goa_sys::GoaFiles, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Files>
        {
            let f: &F = &*(f as *const F);
            f(&Files::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::uri\0".as_ptr() as *const _,
                Some(transmute(notify_uri_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Files {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Files")
    }
}
